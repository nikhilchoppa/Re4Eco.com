<?php

namespace PWAForWP;

class ServiceWorker {

	public $capability = '';
	public $sw_query_var = 'pwa_serviceworker';
	public $sw_path = '';
	public $sw_url = '';

	public function __construct() {
		$this->capability = pwa_get_instance()->Init->capability;
	}

	public function run() {
		add_action( 'admin_notices', [ $this, 'ssl_error_notice' ] );

		add_action( 'parse_request', [ $this, 'return_sw' ] );
		add_filter( 'query_vars', [ $this, 'add_service_worker_query_var' ] );

        add_action( 'wp_head', [ $this, 'unregister__old_pwa_sw' ] );
		add_action( 'wp_head', [ $this, 'register_sw' ] );
	}

	public function ssl_error_notice() {

		if ( is_ssl() ) {
			return;
		}

		$screen = get_current_screen();
		if ( PWA_SETTINGS_PARENT != $screen->parent_base ) {
			return;
		}

		echo '<div class="notice notice-error">';
		echo '<p>' . __( 'Your site has to be served over https to use progressive web app features.', 'pwa' ) . '</p>';
		echo '</div>';
	}

	public function return_sw() {
		if ( isset( $GLOBALS['wp']->query_vars['pwa_serviceworker'] ) ) {
			if ( 1 == $GLOBALS['wp']->query_vars['pwa_serviceworker'] ) {
				header( 'Content-Type: text/javascript; charset=utf-8' );
				$content_header = "'use strict';\n\n";
		        $content_header .= "/**\n";
		        $content_header .= " * Generated by Progressive Web Apps For WordPress:\n";
		        $content_header .= " * https://codecanyon.net/user/DaftPlug/\n";
		        $content_header .= " * by DaftPlug\n";
		        $content_header .= "**/\n";
		        $content_header .= 'const version = \'{{time}}\';';

				$content = apply_filters( 'pwa_sw_content', '' );
				$path    = plugin_dir_path( pwa_get_instance()->file ) . 'classes/Libs';
				require_once $path . '/minify/autoload.php';
				require_once $path . '/path-converter/autoload.php';
				$minifier = new \MatthiasMullie\Minify\JS( $content );

				$content = $minifier->minify();
				$content = $content_header . $content;
				echo $content;
				exit;
			}
		}
	}

	public function add_service_worker_query_var( $query_vars ) {
		$query_vars[] = 'pwa_serviceworker';

		return $query_vars;
	}

	public function unregister__old_pwa_sw() {
		if ( ! isset( $_SERVER['HTTPS'] ) ) {
			return;
		}
		?>
		<script type="text/javascript" id="serviceworker-unregister">
			if ('serviceWorker' in navigator) {
				navigator.serviceWorker.getRegistrations().then(function (registrations) {
					registrations.forEach(function (registration) {
						if (registration.active.scriptURL === '<?php echo get_site_url( null, '/pwa-serviceworker.js' ) ?>' ) {
							registration.unregister();
						}
					});
				});
			}
		</script>
		<?php
	}

	public function register_sw() {
		$site_url       = trailingslashit( get_site_url() );
		$site_url_parts = parse_url( $site_url );
		$path           = '/';
		if ( array_key_exists( 'path', $site_url_parts ) ) {
			$path = $site_url_parts['path'];
		}
		?>
		<script type="text/javascript" id="serviceworker">
			if (navigator.serviceWorker) {
				window.addEventListener('load', function () {
					navigator.serviceWorker.register(
						<?php echo $this->get_sw_url(); ?>, {"scope": "<?php echo str_replace( '/', '\/', $path ); ?>"}
					);
				});
			}
		</script>
		<?php
	}

	/**
	 * Helpers
	 */

	public function get_sw_url( $encoded = true ) {
		$url = add_query_arg( [
			'pwa_serviceworker' => 1,
		], site_url( '/', 'https' ) );

		if ( $encoded ) {
			return wp_json_encode( $url );
		}

		return $url;
	}
}